#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Django settings for driver project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from driver.tz_list import TZ_LIST
from django.conf import locale
import socket
from django.utils.translation import ugettext_lazy as _
import os
import sys
import dotenv
dotenv.load_dotenv(override=True)


try:
    HOSTNAME = socket.gethostname()
except:
    HOSTNAME = 'localhost'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEVELOP = True if os.environ.get(
    'DJANGO_ENV', 'development') == 'development' else False
STAGING = True if os.environ.get(
    'DJANGO_ENV', 'staging') == 'staging' else False
PRODUCTION = not DEVELOP and not STAGING

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# os.environ['DJANGO_SECRET_KEY']
SECRET_KEY = 'sfdgljfkghdjkgfhjkghdskljhgljhsdjkghfgjklhdgjklshjkhg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEVELOP
TESTING = 'test' in sys.argv

ALLOWED_HOSTS = ['*']
# TODO: Switch to CORS_ORIGIN_REGEX_WHITELIST when we have a domain in place
# CORS_ORIGIN_ALLOW_ALL = False
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_METHODS = ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS']

# CORS_ALLOWED_ORIGINS = [
#    "%s://%s" % (os.environ.get('PROTOCOL', 'http'), os.environ.get("HOST_NAME", "localhost"),),
#    'http://localhost:8000',
#    'http://localhost:4200',
# ]
# CORS_ALLOW_HEADERS = ('content-disposition', 'accept-encoding', 'responsetype',
#                      'content-type', 'accept', 'origin', 'authorization', 'x-csrftoken')
LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "en")

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/


if os.getenv('LANGUAGES', None):
    names = {
        'en': 'English',
        'lo': 'Laotian',
        'pt-br': 'Brazilian Portuguese',
        'es': 'Spanish',
        'fr': 'French',
        'zh-hans': 'Simplified Chinese',
    }
    LANGUAGES = list(
        map(lambda l: (l, _(names[l])), os.getenv('LANGUAGES').split(",")))
    du = locale.LANG_INFO
    du["lo"] = {
        'bidi': True,
        'code': 'lo',
        'name': 'Laotian',
        'name_local': 'ລາວ',
    }
    locale.LANG_INFO = dict(du)

else:
    LANGUAGES = [
        ('en', _('English')),
        ('lo', _('Laotian')),
        ('pt-br', _('Brazilian Portuguese')),
        ('es', _('Spanish')),
        ('fr', _('French')),
        ('zh-hans', _('Simplified Chinese')),
    ]

# Application definition

INSTALLED_APPS = (
    'grout',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.gis',
    'django.contrib.postgres',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'storages',
    'captcha',
    'django_extensions',

    'django_filters',
    'rest_framework_gis',

    'driver',
    'driver_auth',
    'data',
    'user_filters',
    'black_spots',
    'django_json_widget',
    'django_verbatim',
    'mozilla_django_oidc',  # Load after auth
    'django_admin_hstore_widget',
    'constance',
    'proxy',
    'ordered_model', 'django_ckeditor_5',
)

MIDDLEWARE = (
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
)

if DEBUG:
    # Perform set up for Django Debug Toolbar
    INSTALLED_APPS += (
        'debug_toolbar',
    )
    # Prepend the Debug Toolbar middleware class to the begining of the list
    MIDDLEWARE = (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ) + MIDDLEWARE
    # Show toolbar in local dev
    DEBUG_TOOLBAR_CONFIG = {
        # Since REMOTE_HOST gets overloaded by routing through Docker and Nginx, we can't rely on
        # it like DDT normally does internally.
        # Until an alternative is available, we have to trust DEBUG=True is safety enough
        'SHOW_TOOLBAR_CALLBACK': lambda request: True
    }


ROOT_URLCONF = 'driver.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'driver.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.environ.get('DRIVER_DB_NAME', 'driver'),
        'HOST': os.environ.get('DRIVER_DB_HOST', 'localhost'),
        'PORT': os.environ.get('DRIVER_DB_PORT', 5432),
        'USER': os.environ.get('DRIVER_DB_USER', 'driver'),
        'PASSWORD': os.environ.get('DRIVER_DB_PASSWORD', 'driver'),
        'CONN_MAX_AGE': 0,  # in seconds
        'OPTIONS': {
            #    'sslmode': 'require'
        }
    }
}
POSTGIS_VERSION = tuple(
    map(int, os.environ.get('DJANGO_POSTGIS_VERSION', '2.1.3').split("."))
)

# File storage
# DEFAULT_FILE_STORAGE = 'storages.backends.overwrite.OverwriteStorage'


TIME_ZONE = os.environ.get("TIMEZONE", 'America/Sao_Paulo')

USE_I18N = True

USE_L10N = True

USE_TZ = True

OSM_EXTRACT_URL = os.environ.get('DRIVER_OSM_EXTRACT_URL',
                                 'https://download.geofabrik.de/asia/philippines-latest.osm.pbf')

BLACKSPOT_RECORD_TYPE_LABEL = os.environ.get(
    'BLACKSPOT_RECORD_TYPE_LABEL', 'Incident')
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = os.environ.get('STATIC_ROOT', '/opt/app/static/')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'templates/dist'),
    os.path.join(BASE_DIR, 'templates/schema_editor/dist'),
    os.path.join(BASE_DIR, 'web'),
)

# Media files (uploaded via API)
# https://docs.djangoproject.com/en/1.8/topics/files/

MEDIA_ROOT = os.environ.get('MEDIA_ROOT', 'media/')
MEDIA_URL = '/media/'

# use cookie-based sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_HTTPONLY = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'INFO',
        },
        'grout': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'driver_auth': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'data': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'user_filters': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'black_spots': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'oic': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# user and group settings
DEFAULT_ADMIN_EMAIL = os.environ.get(
    "DRIVER_ADMIN_EMAIL", 'vdasegura@cetsp.com.br')
DEFAULT_ADMIN_USERNAME = os.environ.get("DRIVER_ADMIN_USERNAME", None)
DEFAULT_ADMIN_PASSWORD = os.environ.get("DRIVER_ADMIN_PASSWORD", None)
# the client keeps these group names in the editor's config.js
DRIVER_GROUPS = {
    'READ_ONLY': os.environ.get('DRIVER_READ_ONLY_GROUP', 'public'),
    'READ_WRITE': os.environ.get('DRIVER_READ_WRITE_GROUP', 'analyst'),
    'ADMIN': os.environ.get('DRIVER_ADMIN_GROUP', 'admin')
}

# Django Rest Framework
# http://www.django-rest-framework.org/

REST_FRAMEWORK = {
    # NB: session auth must appear before token auth for both to work.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

# django-redis cache configuration
# https://niwinz.github.io/django-redis/latest/
# https://docs.djangoproject.com/en/1.8/topics/cache/#cache-arguments

REDIS_HOST = os.environ.get('DRIVER_REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.environ.get('DRIVER_REDIS_PORT', '6379')

# JAR file cache TLL (keep in redis for this many seconds since creation or last retrieval)
JARFILE_REDIS_TTL_SECONDS = os.environ.get(
    'DRIVER_JAR_TTL_SECONDS', 60 * 60 * 24 * 30)  # 30 days

CACHES = {
    "default": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/2',
        'TIMEOUT': None,  # never expire
        'KEY_PREFIX': 'DJANGO',
        'VERSION': 1,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,  # seconds
            'SOCKET_TIMEOUT': 5,  # seconds
            'MAX_ENTRIES': 900,  # defaults to 300
            # fraction culled when max reached (1 / CULL_FREQ); default: 3
            'CULL_FREQUENCY': 4,
            # 'COMPRESS_MIN_LEN': 0, # set to value > 0 to enable compression
        }
    },
    "jars": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/3',
        'TIMEOUT': JARFILE_REDIS_TTL_SECONDS,
        'KEY_PREFIX': None,
        'VERSION': 1,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,  # seconds
            'SOCKET_TIMEOUT': 5,  # seconds
            'MAX_ENTRIES': 300,  # defaults to 300
            # fraction culled when max reached (1 / CULL_FREQ); default: 3
            'CULL_FREQUENCY': 4,
            # 'COMPRESS_MIN_LEN': 0, # set to value > 0 to enable compression
        }
    },
    "boundaries": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://{host}:{port}/4'.format(host=REDIS_HOST, port=REDIS_PORT),
        # Timeout is set and renewed at the individual key level in data/filters.py
        'TIMEOUT': None,
        'KEY_PREFIX': 'boundary',
        'VERSION': 1,
    },
    "geocode": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://{host}:{port}/5'.format(host=REDIS_HOST, port=REDIS_PORT),
        'TIMEOUT': None,
        'KEY_PREFIX': 'geocode',
        'VERSION': 1,
    },
}

# Celery
BROKER_URL = 'redis://{}:{}/0'.format(REDIS_HOST, REDIS_PORT)
CELERY_RESULT_BACKEND = 'redis://{}:{}/1'.format(REDIS_HOST, REDIS_PORT)
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ROUTES = {
    'black_spots.tasks.calculate_black_spots.calculate_black_spots': {'queue': 'taskworker'},
    'black_spots.tasks.get_segments.cleanup': {'queue': 'taskworker'},
    'black_spots.tasks.get_segments.create_segments_tar': {'queue': 'taskworker'},
    'black_spots.tasks.get_segments.get_segments_shp': {'queue': 'taskworker'},
    'black_spots.tasks.load_road_network.load_road_network': {'queue': 'taskworker'},
    'black_spots.tasks.load_blackspot_geoms.load_blackspot_geoms': {'queue': 'taskworker'},
    'black_spots.tasks.generate_training_input.get_training_noprecip': {'queue': 'taskworker'},
    'black_spots.tasks.generate_training_input.get_training_precip': {'queue': 'taskworker'},
    'data.tasks.remove_duplicates.remove_duplicates': {'queue': 'taskworker'},
    'data.tasks.export_csv.export_csv': {'queue': 'taskworker'},
    'data.tasks.fetch_record_csv.export_records': {'queue': 'taskworker'},
    'data.tasks.geocode_records.geocode_records': {'queue': 'taskworker'},
    'data.tasks.geocode_records.generate_blackspots': {'queue': 'taskworker'},
    'data.tasks.geocode_records.generate_roads_index': {'queue': 'taskworker'},
    'data.tasks.create_indexes.create_indexes': {'queue': 'taskworker'},
}
# This needs to match the proxy configuration in nginx so that requests for files generated
# by celery jobs go to the right place.
CELERY_DOWNLOAD_PREFIX = '/download/'
CELERY_EXPORTS_FILE_PATH = '/var/www/media'

# Deduplication settings
DEDUPE_TIME_RANGE_HOURS = float(os.environ.get(
    'DRIVER_DEDUPE_TIME_RANGE_HOURS', '12'))
# .001 ~= 110m
DEDUPE_DISTANCE_DEGREES = float(os.environ.get(
    'DRIVER_DEDUPE_DISTANCE_DEGREES', '0.0008'))

GROUT = {
    # It is suggested to change this if you know that your data will be limited to
    # a certain part of the world, for example to a UTM Grid projection or a state
    # plane.
    'SRID': 4326,
}

# django-oidc settings
HOST_URL = os.environ.get('HOST_URL', '')

# TODO: conditionally set for GLUU in production
GOOGLE_OAUTH_CLIENT_ID = os.environ.get(
    'OAUTH_CLIENT_ID', '418431456233-i69dc0paqp9ujj40gha8ru5a1tflbjl2.apps.googleusercontent.com')
GOOGLE_OAUTH_CLIENT_SECRET = os.environ.get(
    'OAUTH_CLIENT_SECRET', 'E_8AybgrjZ5LdegXBENy0u83')
OIDC_RP_CLIENT_ID = os.environ.get(
    'OAUTH_CLIENT_ID', '418431456233-i69dc0paqp9ujj40gha8ru5a1tflbjl2.apps.googleusercontent.com')
OIDC_RP_CLIENT_SECRET = os.environ.get(
    'OAUTH_CLIENT_SECRET', 'fqN1UoPadvcoTLSSH98WzIRF')

# Forecast.io settings
FORECAST_IO_API_KEY = os.environ.get('FORECAST_IO_API_KEY', '')


AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)

if GOOGLE_OAUTH_CLIENT_ID:
    AUTHENTICATION_BACKENDS += (
        'mozilla_django_oidc.auth.OIDCAuthenticationBackend',)
    OIDC_OP_AUTHORIZATION_ENDPOINT = 'https://accounts.google.com/o/oauth2/v2/auth'
    OIDC_OP_TOKEN_ENDPOINT = 'https://www.googleapis.com/oauth2/v4/token'
    OIDC_OP_USER_ENDPOINT = "https://www.googleapis.com/oauth2/v3/userinfo"
    OIDC_REDIRECT_REQUIRE_HTTPS = not DEBUG
    OIDC_RP_SIGN_ALGO = "RS256"
    OIDC_OP_JWKS_ENDPOINT = "https://www.googleapis.com/oauth2/v3/certs"
    LOGIN_REDIRECT_URL = "/"
    OIDC_USE_NONCE = True
    OIDC_CALLBACK_CLASS = 'driver_auth.oidc_callback.OIDC_CallbackView'
    OIDC_AUTHENTICATE_CLASS = 'driver_auth.oidc_callback.OIDC_RequestView'
"""
LOGIN_URL = 'openid'

OIDC_ALLOW_DYNAMIC_OP = False
OIDC_CREATE_UNKNOWN_USER = True
OIDC_VERIFY_SSL = True

# Information used when registering the client, this may be the same for all OPs
# Ignored if auto registration is not used.
OIDC_DYNAMIC_CLIENT_REGISTRATION_DATA = {
    "application_type": "web",
    "contacts": ["info@azavea.com", "kkillebrew@azavea.com"],
    "redirect_uris": [HOST_URL + "/openid/callback/login/", ],
    "post_logout_redirect_uris": [HOST_URL + "/openid/callback/logout/", ]
}

# Default is using the 'code' workflow, which requires direct connectivity from your website to the OP.
OIDC_DEFAULT_BEHAVIOUR = {
    "response_type": "code",
    "scope": ["openid", "email"],
}

OIDC_PROVIDERS = { }

if len(GOOGLE_OAUTH_CLIENT_ID) > 0:
    # see: https://developers.google.com/identity/protocols/OpenIDConnect?hl=en
    # example config towards bottom of page
    OIDC_PROVIDERS['google.com'] = {
        "provider_info": {
            "issuer": "https://accounts.google.com",
            "authorization_endpoint": "https://accounts.google.com/o/oauth2/v2/auth",
            "token_endpoint": "https://www.googleapis.com/oauth2/v4/token",
            "userinfo_endpoint": "https://www.googleapis.com/oauth2/v3/userinfo",
            "revocation_endpoint": "https://accounts.google.com/o/oauth2/revoke",
            "jwks_uri": "https://www.googleapis.com/oauth2/v3/certs",
            "response_types_supported": [
                "code",
                "token",
                "id_token",
                "code token",
                "code id_token",
                "token id_token",
                "code token id_token",
                "none"
            ], "subject_types_supported": [
                "public"
            ], "id_token_signing_alg_values_supported": [
                "RS256"
            ], "scopes_supported": [
                "openid",
                "email",
                "profile"
            ], "token_endpoint_auth_methods_supported": [
                "client_secret_post",
                "client_secret_basic"
            ], "claims_supported": [
                "aud",
                "email",
                "email_verified",
                "exp",
                "family_name",
                "given_name",
                "iat",
                "iss",
                "locale",
                "name",
                "picture",
                "sub"
            ]
        },
        "behaviour": OIDC_DEFAULT_BEHAVIOUR,
        "client_registration": {
            "client_id": GOOGLE_OAUTH_CLIENT_ID,
            "client_secret": GOOGLE_OAUTH_CLIENT_SECRET,
            "redirect_uris": [HOST_URL + "/openid/callback/login/"],
            "post_logout_redirect_uris": [HOST_URL + "/openid/callback/logout/"],
        }
    }
"""
# These fields will be visible to read-only users
READ_ONLY_FIELDS_REGEX = r'Det'

CONSTANCE_REDIS_CONNECTION = {
    'host': REDIS_HOST,
    'port': 6379,
    'db': 0,
}
CONSTANCE_ADDITIONAL_FIELDS = {
    'tzselect': ['django.forms.fields.ChoiceField', {
        'widget': 'django.forms.Select',
        'choices': list(map(lambda x: [x, x], TZ_LIST))
    }],
    'locales': ['django.forms.fields.ChoiceField', {

    }]
}

CONSTANCE_CONFIG = {
    'SEGMENT_SIZE': (50, _("segment_size")),
    'MAP_CENTER_LATITUDE': (os.getenv('CENTER_LATITUDE', -23.5), _("Latitude")),
    'MAP_CENTER_LONGITUDE': (os.getenv('CENTER_LONGITUDE', -46.7), _("Longitude")),
    'MAP_ZOOM': (os.getenv('ZOOM', 11), _("Zoom")),
    "PRIMARY_LABEL": (os.getenv('PRIMARYLABEL', "Sinistro"), _("Accident")),
    "SECONDARY_LABEL": (os.getenv('SECONDARYLABEL', "Intervention"), _("Intervention")),
    "WINDSHAFT": ("http://windshaft-%s" % (os.getenv("CONTAINER_NAME", 'driver')), "WindShaft"),
    "HOSTNAME": (os.getenv('HOST_URL', os.getenv('PROTOCOL', "https")+"://"+os.getenv('HOSTNAME', "localhost:8000")), _("Host Name")),
    "COUNTRY_CODE": (os.getenv('COUNTRY', "ic"), _("Country Code")),
    "MAPSERVER": ("http://mapserver-%s" % (os.getenv('CONTAINER_NAME', 'driver')), "MapServer"),
    'TIMEZONE': (os.getenv('TIMEZONE', 'America/Sao_Paulo'), 'Time Zone', 'tzselect'),
    "GEOSERVER": (os.getenv('GEOSERVER', ''), "GeoServer"),
    'MAPILLARY_CLIENT_TOKEN': ("", _("Mapillary Client token")),
    'MAPILLARY_CLIENT_ID': ("", _("Mapillary Client")),
    'MAPILLARY_SECRET': ("", _("Mapillary secret")),
    'MAPILLARY_TOKEN': ("", _("Mapillary token")),
    'MAPILLARY_EXPIRES': ("", _("Mapillary expiry date")),
    'NOMINATIM': ("", _("Nominatim key")),
    'IRAP_AUTH_ID': ("", _("iRAP Auth ID")),
    'IRAP_API_KEY': ("", _("iRAP API key")),
    'IRAP_PRIVATE_KEY': ("", _("iRAP Private key")),
    'OPENWEATHER_RAPID_KEY': ((os.getenv('OPENWEATHER_RAPID_KEY', '')), _("Open Weather API")),
    'CURRENCY': ((os.getenv('CURRENCY', '')), _("Currency")),
    'IDLE_TIMEOUT': ((os.getenv('IDLE_TIMEOUT', '')), _("Idle Timeout")),
}
CAPTCHA_OUTPUT_FORMAT = u'%(image)s %(hidden_field)s %(text_field)s'


EMAIL_HOST = os.environ.get("EMAIL_HOST", 'localhost')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 25)
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 0) == '1'
DEFAULT_FROM_EMAIL = os.environ.get(
    'DEFAULT_FROM_EMAIL', 'vidasegura@vidasegura.cetsp.com.br')

EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None)
if EMAIL_HOST_USER:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DEFAULT_FROM_EMAIL = os.environ.get(
    'DEFAULT_FROM_EMAIL', 'vidasegura@vidasegura.cetsp.com.br')

EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None)


# start rich

customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',
        'label': 'Red'
    },
    {
        'color': 'hsl(340, 82%, 52%)',
        'label': 'Pink'
    },
    {
        'color': 'hsl(291, 64%, 42%)',
        'label': 'Purple'
    },
    {
        'color': 'hsl(262, 52%, 47%)',
        'label': 'Deep Purple'
    },
    {
        'color': 'hsl(231, 48%, 48%)',
        'label': 'Indigo'
    },
    {
        'color': 'hsl(207, 90%, 54%)',
        'label': 'Blue'
    },
]

#CKEDITOR_5_CUSTOM_CSS = 'path_to.css'  # optional
#CKEDITOR_5_FILE_STORAGE = "path_to_storage.CustomStorage"  # optional
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage', 
         '|', 'alignment:left', 'alignment:right', 'alignment:center', 'alignment:justify',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

# end rich
