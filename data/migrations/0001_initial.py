# Generated by Django 3.2.4 on 2021-12-08 13:49

import data.models
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
import uuid

sql_statement = open("find_segments.sql").read()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('black_spots', '0001_initial'),
        ('grout', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(sql_statement),
        migrations.CreateModel(
            name='DedupeJob',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('STARTED', 'Started'), ('SUCCESS', 'Success'), ('ERROR', 'Error')], default='PENDING', max_length=8)),
                ('celery_task', models.UUIDField(null=True)),
            ],
            options={
                'get_latest_by': 'datetime',
            },
        ),
        migrations.CreateModel(
            name='Dictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.TextField(max_length=8)),
                ('name', models.TextField(max_length=100)),
                ('content', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dictionary',
                'verbose_name_plural': 'Dictionaries',
            },
        ),
        migrations.CreateModel(
            name='DriverRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='grout.record')),
                ('weather', models.CharField(blank=True, max_length=50, null=True)),
                ('light', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('city_district', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('road', models.CharField(blank=True, max_length=200, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('mapillary', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('grout.record',),
        ),
        migrations.CreateModel(
            name='SegmentSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=200, null=True)),
                ('effective_start', models.DateTimeField()),
                ('effective_end', models.DateTimeField(blank=True, null=True)),
                ('record_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='grout.recordtype')),
            ],
            options={
                'verbose_name': 'Segment Set',
                'verbose_name_plural': 'Segment Sets',
            },
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('name', models.TextField(max_length=200, null=True)),
                ('data', django.contrib.postgres.fields.hstore.HStoreField()),
                ('segment_set', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.segmentset')),
            ],
            options={
                'verbose_name': 'Segment',
                'verbose_name_plural': 'Segments',
            },
        ),
        migrations.CreateModel(
            name='RecordSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('name', models.TextField(max_length=200, null=True)),
                ('size', models.IntegerField()),
                ('data', django.contrib.postgres.fields.hstore.HStoreField()),
                ('roadmap', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='black_spots.roadmap')),
            ],
            options={
                'verbose_name': 'Record Segment',
                'verbose_name_plural': 'Record Segments',
            },
        ),
        migrations.CreateModel(
            name='RecordDuplicate',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField(default=0)),
                ('resolved', models.BooleanField(default=False)),
                ('duplicate_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='duplicate_record', to='data.driverrecord')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data.dedupejob')),
                ('record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='record', to='data.driverrecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecordCostConfig',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('content_type_key', models.TextField()),
                ('property_key', models.TextField()),
                ('cost_prefix', models.CharField(blank=True, max_length=6, null=True)),
                ('cost_suffix', models.CharField(blank=True, max_length=6, null=True)),
                ('enum_costs', django.contrib.postgres.fields.hstore.HStoreField()),
                ('record_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='grout.recordtype')),
            ],
            options={
                'verbose_name': 'Record Cost Config',
                'verbose_name_plural': 'Record Cost Configs',
            },
        ),
        migrations.CreateModel(
            name='RecordAuditLogEntry',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(db_index=True, max_length=30)),
                ('record_uuid', models.CharField(db_index=True, max_length=36)),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=6)),
                ('log', models.TextField(null=True)),
                ('signature', models.CharField(max_length=36, null=True)),
                ('record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.driverrecord')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=data.models.get_image_path)),
                ('record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.driverrecord')),
            ],
        ),
        migrations.CreateModel(
            name='Irap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keys', django.contrib.postgres.fields.hstore.HStoreField()),
                ('settings', models.JSONField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='driverrecord',
            name='segment',
            field=models.ManyToManyField(blank=True, null=True, to='data.RecordSegment'),
        ),
    ]
